// Time Complexity : o(n)
// Space Complexity : o(n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// Your code here along with comments explaining your approach
/*
* create a hashmap of id to employee object
* Do bfs and calculate the importance of each employee thats added into the queue
* */
/*
// Definition for Employee.
class Employee {
    public int id;
    public int importance;
    public List<Integer> subordinates;
};
*/

class Solution {
    public int getImportance(List<Employee> employees, int id) {
        HashMap<Integer, Employee> map = new HashMap<>();
        for(Employee e: employees){
           map.put(e.id, e);
        }


        Queue<Integer> q = new LinkedList<>();
        q.add(id);
        int imp = 0;
        while(!q.isEmpty()){
            int size = q.size();
            for(int i =0; i< size; i++){
                int pid = q.poll();
                imp+= map.get(pid).importance;
                for(int ids : map.get(pid).subordinates){
                    q.add(ids);
                }
            }
        }
        return imp;
    }
}