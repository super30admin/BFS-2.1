//T.C - O(m*n) - All oranges can be rotten and every cell has fresh orange. 
//S.C - O(m*n) - 1 rotten orange - At depth (leaf node - (m*n)/2) at max in queue.

// BFS
class Solution {
    
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) {
            return -1;
        }
        
        int m = grid.length;
        int n = grid[0].length;
        
        //Insert pair of indexes in the queue.
        Queue<int []> q = new LinkedList<>();
        int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};
                
        //Put all rotten oranges in the queue for start. 
        int freshOranges = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 2) {
                    q.add(new int[] {i, j});
                }
                if(grid[i][j] == 1) {
                    freshOranges++;
                }
            }
        }
        
        if(q.isEmpty() && freshOranges == 0) return 0;
        
        int time = 0;
        while(!q.isEmpty()) {
            int size = q.size();
            for(int i = 0; i < size; i++) {
                int[] curr = q.poll();
                for(int[] dir : dirs) {
                    int x = curr[0] + dir[0];
                    int y = curr[1] + dir[1];
                    
                    //If I can rotten the orange and move forward. -- Check outbound conditions
                    if(x >= 0 && y >= 0 && x < m && y < n && grid[x][y] == 1) {
                        //Mark it visited.
                        grid[x][y] = 2;
                        freshOranges--;
                        q.add(new int[]{x,y});
                    }        
                }
            }
            time++;
        }
        
        //All oranges cannot be rotten.
        if(freshOranges == 0) { return time - 1; }
        return -1;
    }
}


//DFS

//T.C - O(m2 n2) - All oranges can be rotten and every cell has fresh orange. 
//DFS solution is not efficient when we have to visit the same node again and again. 


class Solution {
    
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return -1;
        
        int m = grid.length;
        int n = grid[0].length;
        int[][] dir = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 2) {
                    dfs(grid, i, j, 2, m, n, dir);
                }
            }
        }
        
        //2 is an offset. Max number in grid is min time taken
        int max = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                //All oranges cannot be rotten. 
                if(grid[i][j] == 1) { return -1; }
                max = Math.max(grid[i][j], max);
            }
        }
        
        return max - 2;
    }
    
    private void dfs(int[][] grid, int i, int j, int time, int m, int n, int[][] dirs) {
        //Base
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == 0) return;
        
        //Override time with lesser
        if(grid[i][j] != 1 && grid[i][j] < time) return;
        
        //Logic
        grid[i][j] = time;
        
        for(int[] dir : dirs) {
            int cr = dir[0] + i;
            int cc = dir[1] + j;
            
            dfs(grid, cr, cc, grid[i][j] + 1, m, n, dirs);
        }
        
    }
}
