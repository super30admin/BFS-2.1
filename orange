//Time complexity:O( n*m)
//Space comple: O(n)

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        if(grid.empty())
            return 0;
        int n=grid.size(),m=grid[0].size(),rott=0,level=0;
        queue<vector<int>> que;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                    rott++;
                else if(grid[i][j]==2){
                    vector<int> v{i,j};
                    que.push(v);
                }
            }
        }
        if(rott==0)
            return 0;
        vector<vector<int>> dirs{{1,0},{-1,0},{0,1},{0,-1}};
       while(!que.empty())
       {
           int size=que.size();
           level++;
           while(size--){
           vector<int> h = que.front();
           que.pop();
               
           for(int i=0;i<4;i++)
           {
               int x= dirs[i][0]+ h[0];
               int y=dirs[i][1]+h[1];
               
               if(x>=0 && x<n && y>=0 && y<m && grid[x][y]==1)
               {
                   rott--;
                   grid[x][y]=2;
                   que.push(vector<int> {x,y});
               }
           }
           
           }
       }
        if(rott!=0)
        {
            return -1;
        }
        else
            return level-1;
    }
};
