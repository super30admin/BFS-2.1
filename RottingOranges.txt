/**
Time Complexity - O(mn)
Space Complexity - O(mn)
 */
class Solution {

    public int orangesRotting(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return -1;
        }
        int m = grid.length;
        int n = grid[0].length;

        int[][] dirs = new int[][]{{0,1},{1,0},{-1,0},{0,-1}};
        Queue<int[]> queue = new LinkedList<>();
        int fresh =0;
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (grid[i][j] == 2) {
                    queue.add(new int[]{i,j});
                }
                if (grid[i][j] == 1) {
                    fresh++;
                }
            }
        }
        int time = 0;
        if (fresh == 0) {
            return time;
        }
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i=0; i<size; i++) {
                int[] curr = queue.poll();
                for(int[] dir: dirs) {
                    int nr = curr[0] + dir[0];
                    int nc = curr[1] + dir[1];
                    if (nr >=0 && nc >=0 && nr <m && nc <n && grid[nr][nc] == 1) {
                        queue.add(new int[]{nr,nc});
                        grid[nr][nc] = 2;
                        fresh--;
                    }
                }
            }
            time += 1;
        }
        if (fresh==0) {
            return time-1;
        } 
        return -1;
    }
} 
