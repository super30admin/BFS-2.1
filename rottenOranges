class Solution {
    public int orangesRotting(int[][] grid) {
        
        //994. Rotting Oranges
        //Time complexity is O(m*n)
        //Space compelxity : O(m*n)
        
        Queue<int[]> q = new LinkedList<>();
        int[][] dirs = {{0,1},{0,-1},{-1,0},{1,0}};
        int fresh =0;
        int time =0;
        int rows = grid.length;
        int cols = grid[0].length;
        
        for(int i =0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(grid[i][j]==2)
                    q.add(new int[]{i,j});
                else if(grid[i][j]==1)
                    fresh++;
            }
        }
        if(fresh==0)
            return 0;
        
        while(!q.isEmpty()){
            int size = q.size();
            for(int i=0;i<size;i++){
                int[] current = q.poll();
                for(int[] dir :dirs){
                    int r = dir[0]+current[0];
                    int c =dir[1]+current[1];
                    if(r>=0 && r<rows && c>=0 && c< cols && grid[r][c]==1)
                    {
                        fresh--;
                        grid[r][c]=2;
                        q.add(new int[]{r,c});
                        
                    }
                }
                
            }
            time++;
        }
        if(fresh!=0)
            return -1;
        return time-1;
    }
}