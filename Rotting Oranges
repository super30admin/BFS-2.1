//Time Complexity: O(m*n);
//Space Complexity: O(m*n);

//Approach: Idea is to traverse matrix/grid in first pass to record count of rotten and fresh oranges.
//Perform BFS using dirs on rotten oranges four directions to rot fresh oranges and simultaneously reduce it's count

class Solution {
    public int orangesRotting(int[][] grid) {
        if(grid==null || grid.length==0){
            return -1;
        }
        int fresh = 0;
        int rottenCount = 0;
        int total = 0;
        
        Queue<int[]> que = new LinkedList<>();
        
        for(int i = 0; i < grid.length ; i++){
            for(int j = 0 ; j < grid[i].length ; j++){
                if(grid[i][j]==2){
                    que.add(new int[]{i,j});
                }else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        
        //if no fresh exist to be converted to rotten
        if(fresh==0){
            return 0;
        }
        
        int[][] dirs = {{0,-1},{0,1},{1,0},{-1,0}};
        while(!que.isEmpty()){
            int size = que.size();
            for(int i = 0 ; i < size ; i++){
                int[] curr = que.poll();
                for(int[] dir : dirs){
                    int r = dir[0] + curr[0];
                    int c = dir[1] + curr[1];
                    if(r>=0 && r < grid.length && c>=0  && c < grid[0].length && grid[r][c]==1){
                            grid[r][c] = 2;
                            que.add(new int[]{r,c});
                            fresh--;
                        }
                    }      
            }
            total++;   
        }
        
        if(fresh>0){
            return -1;
        }
        
        return total-1;
    }
}
