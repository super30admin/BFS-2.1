class Solution {
    
    private static final int[][] directions = {
    {-1,0}, //UP
    {0,-1}, //LEFT
    {1,0}, //DOWN
    {0,1}  //RIGHT
    
  };
    
    private static final int EMPTY = 0, FRESH = 1, ROTTEN = 2;
    
    public int orangesRotting(int[][] grid) {
        
       Queue<Pair<Integer, Integer>> q = new LinkedList<>();
       
       int fresh = 0;  //count of fresh oranges
       int m = grid.length;
       int n = grid[0].length;
        
        for(int i = 0; i<m; i++){
            for(int j =0; j<n; j++){
            
            if(grid[i][j] == ROTTEN){
                q.add(new Pair(i, j));
            }
            else if(grid[i][j] == FRESH){
                fresh++;
            }
          }     
        }
        if(fresh == 0){
            return 0;
        }
        
        int time = 0;
        
        while(!q.isEmpty()){
            
            Queue<Pair<Integer, Integer>> next = new LinkedList<>(); 
            
            while(!q.isEmpty()){
            
            Pair<Integer, Integer> p = q.remove();
            
            for(int[] dir : directions){
                
                int X = p.getKey() + dir[0];
                int Y = p.getValue() + dir[1];
                
                if(X>=0 && Y>=0 && X<m && Y<n){
                    //if FRESH -> add to q
                    if(grid[X][Y] == FRESH){
                        grid[X][Y] = ROTTEN;
                        fresh--;  //count of fresh oreanges--
                        
                        next.add(new Pair(X,Y));
                    }
                }
            }
        }
            
            q = next;   //curr = next
            time++;
        
       }
        
        return fresh>0 ? -1 : time-1;
        
    }
}
