//TimeComplexity O(m*n)
//SpaceComplexity O(m*n)

class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> q = new LinkedList<>();
        int fresh = 0;
        for(int i = 0 ; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 2){
                    q.add(new int[]{i,j});
                }
                if(grid[i][j] == 1){
                    fresh++;
                }
            }
        }
        
        //Left,right,top,bottonm
        int[][] dir = new int[][]{{0,-1},{0,1},{-1,0},{1,0}};
        int time = 0;
        if(fresh == 0)return 0;
        while(!q.isEmpty()){
            int size = q.size();
            
            for(int i = 0;i < size; i++){
                int[] curr = q.poll();
                for(int[] dirs : dir){
                    int r = curr[0]+dirs[0];
                    int c = curr[1]+dirs[1];
                    if(r >= 0 && c>= 0 && r< grid.length && c < grid[0].length && grid[r][c] == 1){
                        grid[r][c] = 2;
                        q.add(new int[]{r,c});
                        fresh--;
                    }
                }
            }
            time++;
        }
        if(fresh == 0){
           return time-1; 
        }
       return -1;
    }
}
