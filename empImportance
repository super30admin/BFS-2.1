/*
// Definition for Employee.
class Employee {
    public int id;
    public int importance;
    public List<Integer> subordinates;
};
*/

class Solution {
    public int getImportance(List<Employee> employees, int id) {
        
        //690. Employee Importance
        //Using BFS
        //Time complexity is:O(n) where n is the number of employees
        //Space is : O(n)
        
        if(employees ==null || employees.size()==0)
            return 0;
        
       HashMap<Integer,Employee> emap = new HashMap<>();
        int result =0;
       for(Employee e : employees){
           emap.put(e.id,e);
       }
        Queue<Integer> q = new LinkedList<>();
        q.add(id);
        while(!q.isEmpty()){
            int eid = q.poll();
            Employee mapEmp = emap.get(eid);
            result += mapEmp.importance;
            
            for(int subId : mapEmp.subordinates){
                q.add(subId);
            }
        }
        return result;
    }
}